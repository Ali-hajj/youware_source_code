{
  "version": 3,
  "sources": ["../node_modules/unenv/dist/runtime/_internal/utils.mjs", "../node_modules/unenv/dist/runtime/node/internal/perf_hooks/performance.mjs", "../node_modules/@cloudflare/unenv-preset/dist/runtime/polyfill/performance.mjs", "../node_modules/unenv/dist/runtime/node/console.mjs", "../node_modules/unenv/dist/runtime/mock/noop.mjs", "../node_modules/@cloudflare/unenv-preset/dist/runtime/node/console.mjs", "../node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-console", "../node_modules/unenv/dist/runtime/node/internal/process/hrtime.mjs", "../node_modules/unenv/dist/runtime/node/internal/process/process.mjs", "../node_modules/unenv/dist/runtime/node/internal/tty/read-stream.mjs", "../node_modules/unenv/dist/runtime/node/internal/tty/write-stream.mjs", "../node_modules/@cloudflare/unenv-preset/dist/runtime/node/process.mjs", "../node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-process", "../src/index.ts"],
  "sourceRoot": "output",
  "sourcesContent": ["/*@__NO_SIDE_EFFECTS__*/ export function rawHeaders(headers) {\n\tconst rawHeaders = [];\n\tfor (const key in headers) {\n\t\tif (Array.isArray(headers[key])) {\n\t\t\tfor (const h of headers[key]) {\n\t\t\t\trawHeaders.push(key, h);\n\t\t\t}\n\t\t} else {\n\t\t\trawHeaders.push(key, headers[key]);\n\t\t}\n\t}\n\treturn rawHeaders;\n}\n/*@__NO_SIDE_EFFECTS__*/ export function mergeFns(...functions) {\n\treturn function(...args) {\n\t\tfor (const fn of functions) {\n\t\t\tfn(...args);\n\t\t}\n\t};\n}\n/*@__NO_SIDE_EFFECTS__*/ export function createNotImplementedError(name) {\n\treturn new Error(`[unenv] ${name} is not implemented yet!`);\n}\n/*@__NO_SIDE_EFFECTS__*/ export function notImplemented(name) {\n\tconst fn = () => {\n\t\tthrow createNotImplementedError(name);\n\t};\n\treturn Object.assign(fn, { __unenv__: true });\n}\n/*@__NO_SIDE_EFFECTS__*/ export function notImplementedAsync(name) {\n\tconst fn = notImplemented(name);\n\tfn.__promisify__ = () => notImplemented(name + \".__promisify__\");\n\tfn.native = fn;\n\treturn fn;\n}\n/*@__NO_SIDE_EFFECTS__*/ export function notImplementedClass(name) {\n\treturn class {\n\t\t__unenv__ = true;\n\t\tconstructor() {\n\t\t\tthrow new Error(`[unenv] ${name} is not implemented yet!`);\n\t\t}\n\t};\n}\n", "import { createNotImplementedError } from \"../../../_internal/utils.mjs\";\nconst _timeOrigin = globalThis.performance?.timeOrigin ?? Date.now();\nconst _performanceNow = globalThis.performance?.now ? globalThis.performance.now.bind(globalThis.performance) : () => Date.now() - _timeOrigin;\nconst nodeTiming = {\n\tname: \"node\",\n\tentryType: \"node\",\n\tstartTime: 0,\n\tduration: 0,\n\tnodeStart: 0,\n\tv8Start: 0,\n\tbootstrapComplete: 0,\n\tenvironment: 0,\n\tloopStart: 0,\n\tloopExit: 0,\n\tidleTime: 0,\n\tuvMetricsInfo: {\n\t\tloopCount: 0,\n\t\tevents: 0,\n\t\teventsWaiting: 0\n\t},\n\tdetail: undefined,\n\ttoJSON() {\n\t\treturn this;\n\t}\n};\nexport class PerformanceEntry {\n\t__unenv__ = true;\n\tdetail;\n\tentryType = \"event\";\n\tname;\n\tstartTime;\n\tconstructor(name, options) {\n\t\tthis.name = name;\n\t\tthis.startTime = options?.startTime || _performanceNow();\n\t\tthis.detail = options?.detail;\n\t}\n\tget duration() {\n\t\treturn _performanceNow() - this.startTime;\n\t}\n\ttoJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tentryType: this.entryType,\n\t\t\tstartTime: this.startTime,\n\t\t\tduration: this.duration,\n\t\t\tdetail: this.detail\n\t\t};\n\t}\n}\nexport const PerformanceMark = class PerformanceMark extends PerformanceEntry {\n\tentryType = \"mark\";\n\tconstructor() {\n\t\tsuper(...arguments);\n\t}\n\tget duration() {\n\t\treturn 0;\n\t}\n};\nexport class PerformanceMeasure extends PerformanceEntry {\n\tentryType = \"measure\";\n}\nexport class PerformanceResourceTiming extends PerformanceEntry {\n\tentryType = \"resource\";\n\tserverTiming = [];\n\tconnectEnd = 0;\n\tconnectStart = 0;\n\tdecodedBodySize = 0;\n\tdomainLookupEnd = 0;\n\tdomainLookupStart = 0;\n\tencodedBodySize = 0;\n\tfetchStart = 0;\n\tinitiatorType = \"\";\n\tname = \"\";\n\tnextHopProtocol = \"\";\n\tredirectEnd = 0;\n\tredirectStart = 0;\n\trequestStart = 0;\n\tresponseEnd = 0;\n\tresponseStart = 0;\n\tsecureConnectionStart = 0;\n\tstartTime = 0;\n\ttransferSize = 0;\n\tworkerStart = 0;\n\tresponseStatus = 0;\n}\nexport class PerformanceObserverEntryList {\n\t__unenv__ = true;\n\tgetEntries() {\n\t\treturn [];\n\t}\n\tgetEntriesByName(_name, _type) {\n\t\treturn [];\n\t}\n\tgetEntriesByType(type) {\n\t\treturn [];\n\t}\n}\nexport class Performance {\n\t__unenv__ = true;\n\ttimeOrigin = _timeOrigin;\n\teventCounts = new Map();\n\t_entries = [];\n\t_resourceTimingBufferSize = 0;\n\tnavigation = undefined;\n\ttiming = undefined;\n\ttimerify(_fn, _options) {\n\t\tthrow createNotImplementedError(\"Performance.timerify\");\n\t}\n\tget nodeTiming() {\n\t\treturn nodeTiming;\n\t}\n\teventLoopUtilization() {\n\t\treturn {};\n\t}\n\tmarkResourceTiming() {\n\t\treturn new PerformanceResourceTiming(\"\");\n\t}\n\tonresourcetimingbufferfull = null;\n\tnow() {\n\t\tif (this.timeOrigin === _timeOrigin) {\n\t\t\treturn _performanceNow();\n\t\t}\n\t\treturn Date.now() - this.timeOrigin;\n\t}\n\tclearMarks(markName) {\n\t\tthis._entries = markName ? this._entries.filter((e) => e.name !== markName) : this._entries.filter((e) => e.entryType !== \"mark\");\n\t}\n\tclearMeasures(measureName) {\n\t\tthis._entries = measureName ? this._entries.filter((e) => e.name !== measureName) : this._entries.filter((e) => e.entryType !== \"measure\");\n\t}\n\tclearResourceTimings() {\n\t\tthis._entries = this._entries.filter((e) => e.entryType !== \"resource\" || e.entryType !== \"navigation\");\n\t}\n\tgetEntries() {\n\t\treturn this._entries;\n\t}\n\tgetEntriesByName(name, type) {\n\t\treturn this._entries.filter((e) => e.name === name && (!type || e.entryType === type));\n\t}\n\tgetEntriesByType(type) {\n\t\treturn this._entries.filter((e) => e.entryType === type);\n\t}\n\tmark(name, options) {\n\t\tconst entry = new PerformanceMark(name, options);\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tmeasure(measureName, startOrMeasureOptions, endMark) {\n\t\tlet start;\n\t\tlet end;\n\t\tif (typeof startOrMeasureOptions === \"string\") {\n\t\t\tstart = this.getEntriesByName(startOrMeasureOptions, \"mark\")[0]?.startTime;\n\t\t\tend = this.getEntriesByName(endMark, \"mark\")[0]?.startTime;\n\t\t} else {\n\t\t\tstart = Number.parseFloat(startOrMeasureOptions?.start) || this.now();\n\t\t\tend = Number.parseFloat(startOrMeasureOptions?.end) || this.now();\n\t\t}\n\t\tconst entry = new PerformanceMeasure(measureName, {\n\t\t\tstartTime: start,\n\t\t\tdetail: {\n\t\t\t\tstart,\n\t\t\t\tend\n\t\t\t}\n\t\t});\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tsetResourceTimingBufferSize(maxSize) {\n\t\tthis._resourceTimingBufferSize = maxSize;\n\t}\n\taddEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.addEventListener\");\n\t}\n\tremoveEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.removeEventListener\");\n\t}\n\tdispatchEvent(event) {\n\t\tthrow createNotImplementedError(\"Performance.dispatchEvent\");\n\t}\n\ttoJSON() {\n\t\treturn this;\n\t}\n}\nexport class PerformanceObserver {\n\t__unenv__ = true;\n\tstatic supportedEntryTypes = [];\n\t_callback = null;\n\tconstructor(callback) {\n\t\tthis._callback = callback;\n\t}\n\ttakeRecords() {\n\t\treturn [];\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.disconnect\");\n\t}\n\tobserve(options) {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.observe\");\n\t}\n\tbind(fn) {\n\t\treturn fn;\n\t}\n\trunInAsyncScope(fn, thisArg, ...args) {\n\t\treturn fn.call(thisArg, ...args);\n\t}\n\tasyncId() {\n\t\treturn 0;\n\t}\n\ttriggerAsyncId() {\n\t\treturn 0;\n\t}\n\temitDestroy() {\n\t\treturn this;\n\t}\n}\nexport const performance = globalThis.performance && \"addEventListener\" in globalThis.performance ? globalThis.performance : new Performance();\n", "import {\n  performance,\n  Performance,\n  PerformanceEntry,\n  PerformanceMark,\n  PerformanceMeasure,\n  PerformanceObserver,\n  PerformanceObserverEntryList,\n  PerformanceResourceTiming\n} from \"node:perf_hooks\";\nglobalThis.performance = performance;\nglobalThis.Performance = Performance;\nglobalThis.PerformanceEntry = PerformanceEntry;\nglobalThis.PerformanceMark = PerformanceMark;\nglobalThis.PerformanceMeasure = PerformanceMeasure;\nglobalThis.PerformanceObserver = PerformanceObserver;\nglobalThis.PerformanceObserverEntryList = PerformanceObserverEntryList;\nglobalThis.PerformanceResourceTiming = PerformanceResourceTiming;\n", "import { Writable } from \"node:stream\";\nimport noop from \"../mock/noop.mjs\";\nimport { notImplemented, notImplementedClass } from \"../_internal/utils.mjs\";\nconst _console = globalThis.console;\nexport const _ignoreErrors = true;\nexport const _stderr = new Writable();\nexport const _stdout = new Writable();\nexport const log = _console?.log ?? noop;\nexport const info = _console?.info ?? log;\nexport const trace = _console?.trace ?? info;\nexport const debug = _console?.debug ?? log;\nexport const table = _console?.table ?? log;\nexport const error = _console?.error ?? log;\nexport const warn = _console?.warn ?? error;\nexport const createTask = _console?.createTask ?? /*@__PURE__*/ notImplemented(\"console.createTask\");\nexport const assert = /*@__PURE__*/ notImplemented(\"console.assert\");\nexport const clear = _console?.clear ?? noop;\nexport const count = _console?.count ?? noop;\nexport const countReset = _console?.countReset ?? noop;\nexport const dir = _console?.dir ?? noop;\nexport const dirxml = _console?.dirxml ?? noop;\nexport const group = _console?.group ?? noop;\nexport const groupEnd = _console?.groupEnd ?? noop;\nexport const groupCollapsed = _console?.groupCollapsed ?? noop;\nexport const profile = _console?.profile ?? noop;\nexport const profileEnd = _console?.profileEnd ?? noop;\nexport const time = _console?.time ?? noop;\nexport const timeEnd = _console?.timeEnd ?? noop;\nexport const timeLog = _console?.timeLog ?? noop;\nexport const timeStamp = _console?.timeStamp ?? noop;\nexport const Console = _console?.Console ?? /*@__PURE__*/ notImplementedClass(\"console.Console\");\nexport const _times = /*@__PURE__*/ new Map();\nexport function context() {\n\treturn _console;\n}\nexport const _stdoutErrorHandler = noop;\nexport const _stderrErrorHandler = noop;\nexport default {\n\t_times,\n\t_ignoreErrors,\n\t_stdoutErrorHandler,\n\t_stderrErrorHandler,\n\t_stdout,\n\t_stderr,\n\tassert,\n\tclear,\n\tConsole,\n\tcount,\n\tcountReset,\n\tdebug,\n\tdir,\n\tdirxml,\n\terror,\n\tcontext,\n\tcreateTask,\n\tgroup,\n\tgroupEnd,\n\tgroupCollapsed,\n\tinfo,\n\tlog,\n\tprofile,\n\tprofileEnd,\n\ttable,\n\ttime,\n\ttimeEnd,\n\ttimeLog,\n\ttimeStamp,\n\ttrace,\n\twarn\n};\n", "export default Object.assign(() => {}, { __unenv__: true });\n", "import {\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times,\n  Console\n} from \"unenv/node/console\";\nexport {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n} from \"unenv/node/console\";\nconst workerdConsole = globalThis[\"console\"];\nexport const {\n  assert,\n  clear,\n  // @ts-expect-error undocumented public API\n  context,\n  count,\n  countReset,\n  // @ts-expect-error undocumented public API\n  createTask,\n  debug,\n  dir,\n  dirxml,\n  error,\n  group,\n  groupCollapsed,\n  groupEnd,\n  info,\n  log,\n  profile,\n  profileEnd,\n  table,\n  time,\n  timeEnd,\n  timeLog,\n  timeStamp,\n  trace,\n  warn\n} = workerdConsole;\nObject.assign(workerdConsole, {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n});\nexport default workerdConsole;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/console\";\nglobalThis.console = defaultExport;", "export const hrtime = /*@__PURE__*/ Object.assign(function hrtime(startTime) {\n\tconst now = Date.now();\n\tconst seconds = Math.trunc(now / 1e3);\n\tconst nanos = now % 1e3 * 1e6;\n\tif (startTime) {\n\t\tlet diffSeconds = seconds - startTime[0];\n\t\tlet diffNanos = nanos - startTime[0];\n\t\tif (diffNanos < 0) {\n\t\t\tdiffSeconds = diffSeconds - 1;\n\t\t\tdiffNanos = 1e9 + diffNanos;\n\t\t}\n\t\treturn [diffSeconds, diffNanos];\n\t}\n\treturn [seconds, nanos];\n}, { bigint: function bigint() {\n\treturn BigInt(Date.now() * 1e6);\n} });\n", "import { EventEmitter } from \"node:events\";\nimport { ReadStream, WriteStream } from \"node:tty\";\nimport { notImplemented, createNotImplementedError } from \"../../../_internal/utils.mjs\";\nexport class Process extends EventEmitter {\n\tenv;\n\thrtime;\n\tnextTick;\n\tconstructor(impl) {\n\t\tsuper();\n\t\tthis.env = impl.env;\n\t\tthis.hrtime = impl.hrtime;\n\t\tthis.nextTick = impl.nextTick;\n\t\tfor (const prop of [...Object.getOwnPropertyNames(Process.prototype), ...Object.getOwnPropertyNames(EventEmitter.prototype)]) {\n\t\t\tconst value = this[prop];\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tthis[prop] = value.bind(this);\n\t\t\t}\n\t\t}\n\t}\n\temitWarning(warning, type, code) {\n\t\tconsole.warn(`${code ? `[${code}] ` : \"\"}${type ? `${type}: ` : \"\"}${warning}`);\n\t}\n\temit(...args) {\n\t\treturn super.emit(...args);\n\t}\n\tlisteners(eventName) {\n\t\treturn super.listeners(eventName);\n\t}\n\t#stdin;\n\t#stdout;\n\t#stderr;\n\tget stdin() {\n\t\treturn this.#stdin ??= new ReadStream(0);\n\t}\n\tget stdout() {\n\t\treturn this.#stdout ??= new WriteStream(1);\n\t}\n\tget stderr() {\n\t\treturn this.#stderr ??= new WriteStream(2);\n\t}\n\t#cwd = \"/\";\n\tchdir(cwd) {\n\t\tthis.#cwd = cwd;\n\t}\n\tcwd() {\n\t\treturn this.#cwd;\n\t}\n\tarch = \"\";\n\tplatform = \"\";\n\targv = [];\n\targv0 = \"\";\n\texecArgv = [];\n\texecPath = \"\";\n\ttitle = \"\";\n\tpid = 200;\n\tppid = 100;\n\tget version() {\n\t\treturn \"\";\n\t}\n\tget versions() {\n\t\treturn {};\n\t}\n\tget allowedNodeEnvironmentFlags() {\n\t\treturn new Set();\n\t}\n\tget sourceMapsEnabled() {\n\t\treturn false;\n\t}\n\tget debugPort() {\n\t\treturn 0;\n\t}\n\tget throwDeprecation() {\n\t\treturn false;\n\t}\n\tget traceDeprecation() {\n\t\treturn false;\n\t}\n\tget features() {\n\t\treturn {};\n\t}\n\tget release() {\n\t\treturn {};\n\t}\n\tget connected() {\n\t\treturn false;\n\t}\n\tget config() {\n\t\treturn {};\n\t}\n\tget moduleLoadList() {\n\t\treturn [];\n\t}\n\tconstrainedMemory() {\n\t\treturn 0;\n\t}\n\tavailableMemory() {\n\t\treturn 0;\n\t}\n\tuptime() {\n\t\treturn 0;\n\t}\n\tresourceUsage() {\n\t\treturn {};\n\t}\n\tref() {}\n\tunref() {}\n\tumask() {\n\t\tthrow createNotImplementedError(\"process.umask\");\n\t}\n\tgetBuiltinModule() {\n\t\treturn undefined;\n\t}\n\tgetActiveResourcesInfo() {\n\t\tthrow createNotImplementedError(\"process.getActiveResourcesInfo\");\n\t}\n\texit() {\n\t\tthrow createNotImplementedError(\"process.exit\");\n\t}\n\treallyExit() {\n\t\tthrow createNotImplementedError(\"process.reallyExit\");\n\t}\n\tkill() {\n\t\tthrow createNotImplementedError(\"process.kill\");\n\t}\n\tabort() {\n\t\tthrow createNotImplementedError(\"process.abort\");\n\t}\n\tdlopen() {\n\t\tthrow createNotImplementedError(\"process.dlopen\");\n\t}\n\tsetSourceMapsEnabled() {\n\t\tthrow createNotImplementedError(\"process.setSourceMapsEnabled\");\n\t}\n\tloadEnvFile() {\n\t\tthrow createNotImplementedError(\"process.loadEnvFile\");\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"process.disconnect\");\n\t}\n\tcpuUsage() {\n\t\tthrow createNotImplementedError(\"process.cpuUsage\");\n\t}\n\tsetUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.setUncaughtExceptionCaptureCallback\");\n\t}\n\thasUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.hasUncaughtExceptionCaptureCallback\");\n\t}\n\tinitgroups() {\n\t\tthrow createNotImplementedError(\"process.initgroups\");\n\t}\n\topenStdin() {\n\t\tthrow createNotImplementedError(\"process.openStdin\");\n\t}\n\tassert() {\n\t\tthrow createNotImplementedError(\"process.assert\");\n\t}\n\tbinding() {\n\t\tthrow createNotImplementedError(\"process.binding\");\n\t}\n\tpermission = { has: /*@__PURE__*/ notImplemented(\"process.permission.has\") };\n\treport = {\n\t\tdirectory: \"\",\n\t\tfilename: \"\",\n\t\tsignal: \"SIGUSR2\",\n\t\tcompact: false,\n\t\treportOnFatalError: false,\n\t\treportOnSignal: false,\n\t\treportOnUncaughtException: false,\n\t\tgetReport: /*@__PURE__*/ notImplemented(\"process.report.getReport\"),\n\t\twriteReport: /*@__PURE__*/ notImplemented(\"process.report.writeReport\")\n\t};\n\tfinalization = {\n\t\tregister: /*@__PURE__*/ notImplemented(\"process.finalization.register\"),\n\t\tunregister: /*@__PURE__*/ notImplemented(\"process.finalization.unregister\"),\n\t\tregisterBeforeExit: /*@__PURE__*/ notImplemented(\"process.finalization.registerBeforeExit\")\n\t};\n\tmemoryUsage = Object.assign(() => ({\n\t\tarrayBuffers: 0,\n\t\trss: 0,\n\t\texternal: 0,\n\t\theapTotal: 0,\n\t\theapUsed: 0\n\t}), { rss: () => 0 });\n\tmainModule = undefined;\n\tdomain = undefined;\n\tsend = undefined;\n\texitCode = undefined;\n\tchannel = undefined;\n\tgetegid = undefined;\n\tgeteuid = undefined;\n\tgetgid = undefined;\n\tgetgroups = undefined;\n\tgetuid = undefined;\n\tsetegid = undefined;\n\tseteuid = undefined;\n\tsetgid = undefined;\n\tsetgroups = undefined;\n\tsetuid = undefined;\n\t_events = undefined;\n\t_eventsCount = undefined;\n\t_exiting = undefined;\n\t_maxListeners = undefined;\n\t_debugEnd = undefined;\n\t_debugProcess = undefined;\n\t_fatalException = undefined;\n\t_getActiveHandles = undefined;\n\t_getActiveRequests = undefined;\n\t_kill = undefined;\n\t_preload_modules = undefined;\n\t_rawDebug = undefined;\n\t_startProfilerIdleNotifier = undefined;\n\t_stopProfilerIdleNotifier = undefined;\n\t_tickCallback = undefined;\n\t_disconnect = undefined;\n\t_handleQueue = undefined;\n\t_pendingMessage = undefined;\n\t_channel = undefined;\n\t_send = undefined;\n\t_linkedBinding = undefined;\n}\n", "import { Socket } from \"node:net\";\nexport class ReadStream extends Socket {\n\tfd;\n\tconstructor(fd) {\n\t\tsuper();\n\t\tthis.fd = fd;\n\t}\n\tisRaw = false;\n\tsetRawMode(mode) {\n\t\tthis.isRaw = mode;\n\t\treturn this;\n\t}\n\tisTTY = false;\n}\n", "import { Socket } from \"node:net\";\nexport class WriteStream extends Socket {\n\tfd;\n\tconstructor(fd) {\n\t\tsuper();\n\t\tthis.fd = fd;\n\t}\n\tclearLine(dir, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tclearScreenDown(callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tcursorTo(x, y, callback) {\n\t\tcallback && typeof callback === \"function\" && callback();\n\t\treturn false;\n\t}\n\tmoveCursor(dx, dy, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tgetColorDepth(env) {\n\t\treturn 1;\n\t}\n\thasColors(count, env) {\n\t\treturn false;\n\t}\n\tgetWindowSize() {\n\t\treturn [this.columns, this.rows];\n\t}\n\tcolumns = 80;\n\trows = 24;\n\tisTTY = false;\n}\n", "import { hrtime as UnenvHrTime } from \"unenv/node/internal/process/hrtime\";\nimport { Process as UnenvProcess } from \"unenv/node/internal/process/process\";\nconst globalProcess = globalThis[\"process\"];\nexport const getBuiltinModule = globalProcess.getBuiltinModule;\nexport const { exit, platform, nextTick } = getBuiltinModule(\n  \"node:process\"\n);\nconst unenvProcess = new UnenvProcess({\n  env: globalProcess.env,\n  hrtime: UnenvHrTime,\n  nextTick\n});\nexport const {\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  hasUncaughtExceptionCaptureCallback,\n  setUncaughtExceptionCaptureCallback,\n  loadEnvFile,\n  sourceMapsEnabled,\n  arch,\n  argv,\n  argv0,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  availableMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  disconnect,\n  emit,\n  emitWarning,\n  env,\n  eventNames,\n  execArgv,\n  execPath,\n  finalization,\n  features,\n  getActiveResourcesInfo,\n  getMaxListeners,\n  hrtime,\n  kill,\n  listeners,\n  listenerCount,\n  memoryUsage,\n  on,\n  off,\n  once,\n  pid,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  title,\n  throwDeprecation,\n  traceDeprecation,\n  umask,\n  uptime,\n  version,\n  versions,\n  domain,\n  initgroups,\n  moduleLoadList,\n  reallyExit,\n  openStdin,\n  assert,\n  binding,\n  send,\n  exitCode,\n  channel,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getuid,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setuid,\n  permission,\n  mainModule,\n  _events,\n  _eventsCount,\n  _exiting,\n  _maxListeners,\n  _debugEnd,\n  _debugProcess,\n  _fatalException,\n  _getActiveHandles,\n  _getActiveRequests,\n  _kill,\n  _preload_modules,\n  _rawDebug,\n  _startProfilerIdleNotifier,\n  _stopProfilerIdleNotifier,\n  _tickCallback,\n  _disconnect,\n  _handleQueue,\n  _pendingMessage,\n  _channel,\n  _send,\n  _linkedBinding\n} = unenvProcess;\nconst _process = {\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  hasUncaughtExceptionCaptureCallback,\n  setUncaughtExceptionCaptureCallback,\n  loadEnvFile,\n  sourceMapsEnabled,\n  arch,\n  argv,\n  argv0,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  availableMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  disconnect,\n  emit,\n  emitWarning,\n  env,\n  eventNames,\n  execArgv,\n  execPath,\n  exit,\n  finalization,\n  features,\n  getBuiltinModule,\n  getActiveResourcesInfo,\n  getMaxListeners,\n  hrtime,\n  kill,\n  listeners,\n  listenerCount,\n  memoryUsage,\n  nextTick,\n  on,\n  off,\n  once,\n  pid,\n  platform,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  title,\n  throwDeprecation,\n  traceDeprecation,\n  umask,\n  uptime,\n  version,\n  versions,\n  // @ts-expect-error old API\n  domain,\n  initgroups,\n  moduleLoadList,\n  reallyExit,\n  openStdin,\n  assert,\n  binding,\n  send,\n  exitCode,\n  channel,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getuid,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setuid,\n  permission,\n  mainModule,\n  _events,\n  _eventsCount,\n  _exiting,\n  _maxListeners,\n  _debugEnd,\n  _debugProcess,\n  _fatalException,\n  _getActiveHandles,\n  _getActiveRequests,\n  _kill,\n  _preload_modules,\n  _rawDebug,\n  _startProfilerIdleNotifier,\n  _stopProfilerIdleNotifier,\n  _tickCallback,\n  _disconnect,\n  _handleQueue,\n  _pendingMessage,\n  _channel,\n  _send,\n  _linkedBinding\n};\nexport default _process;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/process\";\nglobalThis.process = defaultExport;", "export interface Env {\n  DB: D1Database;\n}\n\ntype UserRole = 'admin' | 'manager' | 'host' | 'operator';\n\ntype JsonPrimitive = string | number | boolean | null;\n\ntype JsonValue = JsonPrimitive | JsonValue[] | { [key: string]: JsonValue };\n\ninterface JsonObject {\n  [key: string]: JsonValue;\n}\n\ninterface UserRecord {\n  id: string;\n  username: string;\n  role: UserRole;\n  firstName: string;\n  lastName: string;\n  phone: string;\n  email: string;\n  createdAt: string;\n  updatedAt: string;\n  isDefaultAdmin: boolean;\n  ownerYwId: string;\n}\n\ninterface AuthResult {\n  user: UserRecord;\n  tokenHash: string;\n}\n\ninterface EventRecord {\n  id: string;\n  title: string;\n  venue: string;\n  venueId: string;\n  color: string | null;\n  date: string;\n  startTime: string;\n  endTime: string;\n  status: string;\n  paymentStatus: string;\n  paymentMethod: string | null;\n  contact: {\n    name: string;\n    phone: string;\n    email: string;\n  };\n  pricing?: JsonValue;\n  notes: string | null;\n  createdAt: string;\n  updatedAt: string;\n  ownerYwId: string;\n  createdBy: {\n    userId: string;\n    displayName: string | null;\n    role: UserRole | null;\n  };\n  updatedBy?: {\n    userId: string;\n    displayName: string | null;\n    role: UserRole | null;\n  };\n}\n\ntype LicenseStatus = 'active' | 'expired' | 'disabled';\ntype LicensePlanType = 'monthly' | 'yearly';\n\ninterface LicenseRecord {\n  id: string;\n  serialNumber: string;\n  userName: string;\n  planType: LicensePlanType;\n  startDate: string;\n  expiryDate: string;\n  status: LicenseStatus;\n  notes: string | null;\n  createdAt: string;\n  updatedAt: string;\n  ownerYwId: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Project-Id, X-Encrypted-Yw-ID, X-Is-Login, X-Yw-Env',\n};\n\nconst JSON_HEADERS = {\n  'Content-Type': 'application/json',\n};\n\nconst USER_ID_PREFIX = 'EVN';\nconst TOKEN_TTL_MS = 1000 * 60 * 60 * 12; // 12 hours\nconst encoder = new TextEncoder();\n\nfunction corsResponse(response: Response): Response {\n  Object.entries(corsHeaders).forEach(([key, value]) => {\n    response.headers.set(key, value);\n  });\n  return response;\n}\n\nfunction jsonResponse(status: number, data: JsonObject): Response {\n  return corsResponse(\n    new Response(JSON.stringify(data), {\n      status,\n      headers: JSON_HEADERS,\n    })\n  );\n}\n\nfunction badRequest(message: string): Response {\n  return jsonResponse(400, { error: message });\n}\n\nfunction unauthorized(message = 'Unauthorized'): Response {\n  return jsonResponse(401, { error: message });\n}\n\nfunction forbidden(message = 'Forbidden'): Response {\n  return jsonResponse(403, { error: message });\n}\n\nfunction notFound(message = 'Not Found'): Response {\n  return jsonResponse(404, { error: message });\n}\n\nfunction internalError(error: unknown): Response {\n  console.error('Backend error:', error);\n  return jsonResponse(500, {\n    error: 'Internal Server Error',\n    details: error instanceof Error ? error.message : 'Unknown error',\n  });\n}\n\nfunction toHex(bytes: Uint8Array): string {\n  return Array.from(bytes)\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nfunction generateSalt(): string {\n  const bytes = new Uint8Array(16);\n  crypto.getRandomValues(bytes);\n  return toHex(bytes);\n}\n\nasync function hashString(value: string): Promise<string> {\n  const buffer = await crypto.subtle.digest('SHA-256', encoder.encode(value));\n  return toHex(new Uint8Array(buffer));\n}\n\nasync function hashPassword(password: string, salt: string): Promise<string> {\n  return hashString(`${salt}:${password}`);\n}\n\nfunction generateToken(): string {\n  const bytes = new Uint8Array(24);\n  crypto.getRandomValues(bytes);\n  return toHex(bytes);\n}\n\nfunction normalizeDisplayName(first: string, last: string): string {\n  return [first, last].filter(Boolean).join(' ').trim();\n}\n\nasync function cleanupExpiredTokens(env: Env): Promise<void> {\n  const now = Date.now();\n  await env.DB.prepare('DELETE FROM user_tokens WHERE expires_at < ?').bind(now).run();\n}\n\nasync function fetchUserByUsername(env: Env, projectId: string, username: string) {\n  return env.DB.prepare(\n    `SELECT * FROM users WHERE owner_yw_id = ? AND LOWER(username) = LOWER(?) LIMIT 1`\n  )\n    .bind(projectId, username)\n    .first<any>();\n}\n\nfunction mapDbUser(row: any): UserRecord {\n  return {\n    id: row.id,\n    username: row.username,\n    role: row.role,\n    firstName: row.first_name,\n    lastName: row.last_name,\n    phone: row.phone,\n    email: row.email,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    isDefaultAdmin: Boolean(row.is_default_admin),\n    ownerYwId: row.owner_yw_id,\n  };\n}\n\nfunction serializeUser(user: UserRecord): JsonObject {\n  return {\n    id: user.id,\n    username: user.username,\n    role: user.role,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    phone: user.phone,\n    email: user.email,\n    createdAt: user.createdAt,\n    updatedAt: user.updatedAt,\n    isDefaultAdmin: user.isDefaultAdmin,\n  };\n}\n\nasync function getNextUserId(env: Env, projectId: string): Promise<string> {\n  const row = await env.DB.prepare(\n    `SELECT id FROM users WHERE owner_yw_id = ? ORDER BY CAST(SUBSTR(id, 4) AS INTEGER) DESC LIMIT 1`\n  )\n    .bind(projectId)\n    .first<{ id: string }>();\n\n  if (!row) {\n    return `${USER_ID_PREFIX}001`;\n  }\n\n  const numeric = parseInt(row.id.slice(USER_ID_PREFIX.length), 10);\n  const nextValue = numeric + 1;\n  return `${USER_ID_PREFIX}${nextValue.toString().padStart(3, '0')}`;\n}\n\nfunction extractBearerToken(request: Request): string | null {\n  const header = request.headers.get('Authorization');\n  if (!header) return null;\n  const trimmed = header.trim();\n  if (!trimmed.toLowerCase().startsWith('bearer ')) return null;\n  const token = trimmed.slice(7).trim();\n  return token || null;\n}\n\nasync function authenticate(\n  request: Request,\n  env: Env,\n  projectId: string\n): Promise<AuthResult | null> {\n  const token = extractBearerToken(request);\n  if (!token) {\n    return null;\n  }\n\n  const tokenHash = await hashString(token);\n\n  const row = await env.DB.prepare(\n    `SELECT user_id, expires_at FROM user_tokens WHERE token_hash = ? AND owner_yw_id = ? LIMIT 1`\n  )\n    .bind(tokenHash, projectId)\n    .first<{ user_id: string; expires_at: number }>();\n\n  if (!row) {\n    return null;\n  }\n\n  if (row.expires_at <= Date.now()) {\n    await env.DB.prepare('DELETE FROM user_tokens WHERE token_hash = ?').bind(tokenHash).run();\n    return null;\n  }\n\n  const userRow = await env.DB.prepare(\n    `SELECT * FROM users WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n  )\n    .bind(row.user_id, projectId)\n    .first<any>();\n\n  if (!userRow) {\n    await env.DB.prepare('DELETE FROM user_tokens WHERE token_hash = ?').bind(tokenHash).run();\n    return null;\n  }\n\n  return {\n    user: mapDbUser(userRow),\n    tokenHash,\n  };\n}\n\nfunction mapEventRow(row: any): EventRecord {\n  const createdBy = {\n    userId: row.created_by_user_id,\n    displayName: row.created_by_display_name,\n    role: row.created_by_role,\n  };\n\n  const updatedBy = row.updated_by_user_id\n    ? {\n        userId: row.updated_by_user_id,\n        displayName: row.updated_by_display_name,\n        role: row.updated_by_role,\n      }\n    : undefined;\n\n  return {\n    id: row.id,\n    title: row.title,\n    venue: row.venue,\n    venueId: row.venue_id,\n    color: row.color,\n    date: row.date,\n    startTime: row.start_time,\n    endTime: row.end_time,\n    status: row.status,\n    paymentStatus: row.payment_status,\n    paymentMethod: row.payment_method,\n    contact: {\n      name: row.contact_name,\n      phone: row.contact_phone,\n      email: row.contact_email,\n    },\n    pricing: row.pricing_data ? JSON.parse(row.pricing_data) : undefined,\n    notes: row.notes,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    ownerYwId: row.owner_yw_id,\n    createdBy,\n    updatedBy,\n  };\n}\n\nfunction mapLicenseRow(row: any): LicenseRecord {\n  return {\n    id: row.id,\n    serialNumber: row.serial_number,\n    userName: row.user_name,\n    planType: row.plan_type,\n    startDate: row.start_date,\n    expiryDate: row.expiry_date,\n    status: row.status,\n    notes: row.notes,\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n    ownerYwId: row.owner_yw_id,\n  };\n}\n\nconst LICENSE_PLAN_VALUES: LicensePlanType[] = ['monthly', 'yearly'];\nconst LICENSE_STATUS_VALUES: LicenseStatus[] = ['active', 'expired', 'disabled'];\nconst ISO_DATE_REGEX = /^\\d{4}-\\d{2}-\\d{2}$/;\n\nfunction isLicensePlanType(value: string): value is LicensePlanType {\n  return LICENSE_PLAN_VALUES.includes(value as LicensePlanType);\n}\n\nfunction isLicenseStatus(value: string): value is LicenseStatus {\n  return LICENSE_STATUS_VALUES.includes(value as LicenseStatus);\n}\n\nfunction parseIsoDateStrict(value: string): Date | null {\n  if (!ISO_DATE_REGEX.test(value)) {\n    return null;\n  }\n  const date = new Date(`${value}T00:00:00Z`);\n  if (Number.isNaN(date.getTime())) {\n    return null;\n  }\n  return date;\n}\n\nfunction formatIsoDate(date: Date): string {\n  return date.toISOString().slice(0, 10);\n}\n\nfunction addMonthsUtc(date: Date, months: number): Date {\n  const result = new Date(date);\n  const day = result.getUTCDate();\n  result.setUTCDate(1);\n  result.setUTCMonth(result.getUTCMonth() + months);\n  const maxDay = new Date(result.getUTCFullYear(), result.getUTCMonth() + 1, 0).getUTCDate();\n  result.setUTCDate(Math.min(day, maxDay));\n  return result;\n}\n\nfunction sanitizeSerialSegment(input: string | undefined, fallback: string): string {\n  if (!input) {\n    return fallback;\n  }\n  const cleaned = input.toUpperCase().replace(/[^A-Z0-9]/g, '');\n  return cleaned || fallback;\n}\n\nfunction randomAlphaNumeric(length: number): string {\n  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  const bytes = new Uint8Array(length);\n  crypto.getRandomValues(bytes);\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += charset[bytes[i] % charset.length];\n  }\n  return result;\n}\n\nasync function licenseSerialExists(env: Env, ownerYwId: string, serialNumber: string): Promise<boolean> {\n  const existing = await env.DB.prepare(\n    `SELECT id FROM licenses WHERE owner_yw_id = ? AND serial_number = ? LIMIT 1`\n  )\n    .bind(projectId, serialNumber)\n    .first<any>();\n  return Boolean(existing);\n}\n\ninterface LicenseSerialOptions {\n  prefix?: string;\n  userName?: string;\n  planType: LicensePlanType;\n  issuedAt: Date;\n  randomLength?: number;\n  ownerYwId: string;\n}\n\nasync function generateUniqueLicenseSerial(env: Env, options: LicenseSerialOptions): Promise<string> {\n  const base = sanitizeSerialSegment(options.prefix ?? options.userName, 'CLIENT').slice(0, 12);\n  const planSegment = options.planType === 'yearly' ? 'YR' : 'MN';\n  const dateSegment = formatIsoDate(options.issuedAt).replace(/-/g, '');\n  const randomLength = options.randomLength && options.randomLength >= 2 && options.randomLength <= 8\n    ? Math.floor(options.randomLength)\n    : 4;\n\n  for (let attempt = 0; attempt < 12; attempt++) {\n    const serialNumber = `${base}-${planSegment}-${dateSegment}-${randomAlphaNumeric(randomLength)}`;\n    if (!(await licenseSerialExists(env, options.ownerYwId, serialNumber))) {\n      return serialNumber;\n    }\n  }\n\n  throw new Error('Failed to generate a unique license serial number');\n}\n\nclass LicenseInsertError extends Error {\n  constructor(message: string, public code: 'DUPLICATE_SERIAL' | 'INVALID_DATE' = 'INVALID_DATE') {\n    super(message);\n    this.name = 'LicenseInsertError';\n  }\n}\n\nfunction ensureLicenseDateRange(startDate: string, expiryDate: string): void {\n  const start = parseIsoDateStrict(startDate);\n  if (!start) {\n    throw new LicenseInsertError('Invalid start date format', 'INVALID_DATE');\n  }\n  const expiry = parseIsoDateStrict(expiryDate);\n  if (!expiry) {\n    throw new LicenseInsertError('Invalid expiry date format', 'INVALID_DATE');\n  }\n  if (expiry.getTime() < start.getTime()) {\n    throw new LicenseInsertError('Expiry date must be after start date', 'INVALID_DATE');\n  }\n}\n\ninterface LicenseInsertInput {\n  serialNumber: string;\n  userName: string;\n  planType: LicensePlanType;\n  startDate: string;\n  expiryDate: string;\n  status: LicenseStatus;\n  notes: string | null;\n}\n\nasync function insertLicenseRecord(env: Env, ownerYwId: string, input: LicenseInsertInput): Promise<LicenseRecord> {\n  ensureLicenseDateRange(input.startDate, input.expiryDate);\n\n  const existingSerial = await env.DB.prepare(\n    `SELECT id FROM licenses WHERE owner_yw_id = ? AND serial_number = ? LIMIT 1`\n  )\n    .bind(ownerYwId, input.serialNumber)\n    .first<any>();\n\n  if (existingSerial) {\n    throw new LicenseInsertError('Serial number already exists', 'DUPLICATE_SERIAL');\n  }\n\n  const licenseId = crypto.randomUUID();\n  const nowIso = new Date().toISOString();\n\n  try {\n    await env.DB.prepare(\n      `INSERT INTO licenses (\n        id, serial_number, user_name, plan_type, start_date, expiry_date, status, notes,\n        created_at, updated_at, owner_yw_id\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`\n    )\n      .bind(\n        licenseId,\n        input.serialNumber,\n        input.userName,\n        input.planType,\n        input.startDate,\n        input.expiryDate,\n        input.status,\n        input.notes,\n        nowIso,\n        nowIso,\n        ownerYwId\n      )\n      .run();\n  } catch (error) {\n    if (error instanceof Error && /UNIQUE constraint failed/i.test(error.message)) {\n      throw new LicenseInsertError('Serial number already exists', 'DUPLICATE_SERIAL');\n    }\n    throw error;\n  }\n\n  const saved = await env.DB.prepare(\n    `SELECT * FROM licenses WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n  )\n    .bind(licenseId, ownerYwId)\n    .first<any>();\n\n  if (!saved) {\n    throw new Error('Failed to load created license');\n  }\n\n  return mapLicenseRow(saved);\n}\n\nasync function fetchEventById(env: Env, projectId: string, eventId: string) {\n  const row = await env.DB.prepare(\n    `SELECT * FROM events WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n  )\n    .bind(eventId, projectId)\n    .first<any>();\n\n  return row ? mapEventRow(row) : null;\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    try {\n      if (request.method === 'OPTIONS') {\n        return corsResponse(new Response(null, { status: 204 }));\n      }\n\n      const url = new URL(request.url);\n      const path = url.pathname;\n      \n      // Use X-Project-Id for shared project support\n      const projectId = request.headers.get('X-Project-Id');\n      const userYwId = request.headers.get('X-Encrypted-Yw-ID');\n\n      if (!projectId || !userYwId) {\n        return unauthorized('Missing project context headers');\n      }\n\n      await cleanupExpiredTokens(env);\n\n      if (path === '/api/auth/login' && request.method === 'POST') {\n        const body = await request.json().catch(() => null);\n\n        if (!body || typeof body.username !== 'string' || typeof body.password !== 'string') {\n          return badRequest('Username and password are required');\n        }\n\n        const dbUser = await fetchUserByUsername(env, projectId, body.username);\n        if (!dbUser) {\n          return unauthorized('Invalid credentials');\n        }\n\n        const expectedHash = await hashPassword(body.password, dbUser.password_salt);\n        if (expectedHash !== dbUser.password_hash) {\n          return unauthorized('Invalid credentials');\n        }\n\n        const user = mapDbUser(dbUser);\n        const token = generateToken();\n        const tokenHash = await hashString(token);\n        const expiresAt = Date.now() + TOKEN_TTL_MS;\n\n        await env.DB.prepare('DELETE FROM user_tokens WHERE user_id = ? AND owner_yw_id = ?')\n          .bind(user.id, projectId)\n          .run();\n\n        await env.DB.prepare(\n          `INSERT INTO user_tokens (token_hash, user_id, expires_at, owner_yw_id) VALUES (?, ?, ?, ?)`\n        )\n          .bind(tokenHash, user.id, expiresAt, projectId)\n          .run();\n\n        return jsonResponse(200, {\n          token,\n          expiresAt,\n          user: serializeUser(user),\n        });\n      }\n\n      if (path === '/api/auth/logout' && request.method === 'POST') {\n        const auth = await authenticate(request, env, projectId);\n        if (!auth) {\n          return unauthorized();\n        }\n\n        await env.DB.prepare('DELETE FROM user_tokens WHERE token_hash = ?')\n          .bind(auth.tokenHash)\n          .run();\n\n        return jsonResponse(200, { success: true });\n      }\n\n      if (path === '/api/auth/me' && request.method === 'GET') {\n        const auth = await authenticate(request, env, projectId);\n        if (!auth) {\n          return unauthorized();\n        }\n\n        return jsonResponse(200, { user: serializeUser(auth.user) });\n      }\n\n      // All endpoints below require authenticated user\n      const auth = await authenticate(request, env, projectId);\n      if (!auth) {\n        return unauthorized();\n      }\n\n      const currentUser = auth.user;\n\n      if (path === '/api/users' && request.method === 'GET') {\n        if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {\n          return forbidden();\n        }\n\n        const { results } = await env.DB.prepare(\n          `SELECT * FROM users WHERE owner_yw_id = ? ORDER BY created_at ASC`\n        )\n          .bind(projectId)\n          .all();\n\n        const users = results.map(mapDbUser).map(serializeUser);\n        return jsonResponse(200, { users });\n      }\n\n      if (path === '/api/users' && request.method === 'POST') {\n        if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {\n          return forbidden();\n        }\n\n        const body = await request.json().catch(() => null);\n        if (!body) {\n          return badRequest('Invalid payload');\n        }\n\n        const {\n          username,\n          password,\n          role,\n          firstName,\n          lastName,\n          phone,\n          email,\n        } = body;\n\n        if (\n          typeof username !== 'string' ||\n          typeof password !== 'string' ||\n          typeof role !== 'string' ||\n          typeof firstName !== 'string' ||\n          typeof lastName !== 'string' ||\n          typeof phone !== 'string' ||\n          typeof email !== 'string'\n        ) {\n          return badRequest('Missing required user fields');\n        }\n\n        const normalizedRole = role.toLowerCase() as UserRole;\n        if (!['admin', 'manager', 'host', 'operator'].includes(normalizedRole)) {\n          return badRequest('Invalid role');\n        }\n\n        if (currentUser.role === 'manager' && (normalizedRole === 'admin' || normalizedRole === 'manager')) {\n          return forbidden('Managers can only create host or operator accounts');\n        }\n\n        const existingUser = await fetchUserByUsername(env, projectId, username);\n        if (existingUser) {\n          return badRequest('Username already exists');\n        }\n\n        const userId = await getNextUserId(env, projectId);\n\n        const salt = generateSalt();\n        const passwordHash = await hashPassword(password, salt);\n        const nowIso = new Date().toISOString();\n\n        await env.DB.prepare(\n          `INSERT INTO users (\n            id, username, role, first_name, last_name, phone, email,\n            password_hash, password_salt, created_at, updated_at, is_default_admin, owner_yw_id\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?)`\n        )\n          .bind(\n            userId,\n            username,\n            normalizedRole,\n            firstName,\n            lastName,\n            phone,\n            email,\n            passwordHash,\n            salt,\n            nowIso,\n            nowIso,\n            projectId\n          )\n          .run();\n\n        const newUser = await env.DB.prepare(\n          `SELECT * FROM users WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n        )\n          .bind(userId, projectId)\n          .first<any>();\n\n        return jsonResponse(201, { user: serializeUser(mapDbUser(newUser)) });\n      }\n\n      if (path.startsWith('/api/users/') && request.method === 'PUT') {\n        const userId = path.split('/')[3];\n        if (!userId) {\n          return badRequest('User ID is required');\n        }\n\n        const targetRow = await env.DB.prepare(\n          `SELECT * FROM users WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n        )\n          .bind(userId, projectId)\n          .first<any>();\n\n        if (!targetRow) {\n          return notFound('User not found');\n        }\n\n        const targetUser = mapDbUser(targetRow);\n\n        if (currentUser.role === 'manager') {\n          if (targetUser.role === 'admin' || targetUser.role === 'manager') {\n            return forbidden('Managers can only modify host or operator accounts');\n          }\n        }\n\n        const body = await request.json().catch(() => null);\n        if (!body) {\n          return badRequest('Invalid payload');\n        }\n\n        const {\n          firstName = targetUser.firstName,\n          lastName = targetUser.lastName,\n          phone = targetUser.phone,\n          email = targetUser.email,\n          role = targetUser.role,\n          password,\n        } = body;\n\n        const normalizedRole = (role as string | undefined)?.toLowerCase() as UserRole | undefined;\n        if (\n          normalizedRole &&\n          !['admin', 'manager', 'host', 'operator'].includes(normalizedRole)\n        ) {\n          return badRequest('Invalid role');\n        }\n\n        if (targetUser.isDefaultAdmin && normalizedRole && normalizedRole !== 'admin') {\n          return forbidden('Default admin must remain an admin');\n        }\n\n        if (currentUser.role === 'manager' && normalizedRole && (normalizedRole === 'admin' || normalizedRole === 'manager')) {\n          return forbidden('Managers cannot promote users to admin or manager');\n        }\n\n        const nowIso = new Date().toISOString();\n        let passwordHash = targetRow.password_hash;\n        let salt = targetRow.password_salt;\n\n        if (typeof password === 'string' && password.length > 0) {\n          salt = generateSalt();\n          passwordHash = await hashPassword(password, salt);\n        }\n\n        await env.DB.prepare(\n          `UPDATE users SET \n            first_name = ?,\n            last_name = ?,\n            phone = ?,\n            email = ?,\n            role = ?,\n            password_hash = ?,\n            password_salt = ?,\n            updated_at = ?\n          WHERE id = ? AND owner_yw_id = ?`\n        )\n          .bind(\n            firstName,\n            lastName,\n            phone,\n            email,\n            normalizedRole ?? targetUser.role,\n            passwordHash,\n            salt,\n            nowIso,\n            targetUser.id,\n            projectId\n          )\n          .run();\n\n        const updatedRow = await env.DB.prepare(\n          `SELECT * FROM users WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n        )\n          .bind(targetUser.id, projectId)\n          .first<any>();\n\n        return jsonResponse(200, { user: serializeUser(mapDbUser(updatedRow)) });\n      }\n\n      if (path.startsWith('/api/users/') && request.method === 'DELETE') {\n        const userId = path.split('/')[3];\n        if (!userId) {\n          return badRequest('User ID is required');\n        }\n\n        const targetRow = await env.DB.prepare(\n          `SELECT * FROM users WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n        )\n          .bind(userId, projectId)\n          .first<any>();\n\n        if (!targetRow) {\n          return notFound('User not found');\n        }\n\n        const targetUser = mapDbUser(targetRow);\n\n        if (targetUser.isDefaultAdmin) {\n          return forbidden('Cannot delete the default admin account');\n        }\n\n        if (currentUser.role === 'manager') {\n          if (targetUser.role === 'admin' || targetUser.role === 'manager') {\n            return forbidden('Managers can only delete host or operator accounts');\n          }\n        }\n\n        await env.DB.prepare('DELETE FROM user_tokens WHERE user_id = ? AND owner_yw_id = ?')\n          .bind(targetUser.id, projectId)\n          .run();\n\n        await env.DB.prepare('DELETE FROM users WHERE id = ? AND owner_yw_id = ?')\n          .bind(targetUser.id, projectId)\n          .run();\n\n        return jsonResponse(200, { success: true });\n      }\n\n      if (path === '/api/events' && request.method === 'GET') {\n        const { results } = await env.DB.prepare(\n          `SELECT * FROM events\n           WHERE owner_yw_id = ?\n              OR owner_yw_id IS NULL\n           ORDER BY date ASC, start_time ASC`\n        )\n          .bind(projectId)\n          .all();\n\n        const events = results\n          .filter((row) => row.owner_yw_id === projectId || row.owner_yw_id === null)\n          .map((row) => {\n            if (!row.owner_yw_id) {\n              row.owner_yw_id = projectId;\n            }\n            return mapEventRow(row);\n          });\n\n        const legacyIds = events\n          .filter((event) => !event.ownerYwId)\n          .map((event) => event.id);\n\n        if (legacyIds.length > 0) {\n          const placeholders = legacyIds.map(() => '?').join(',');\n          await env.DB.prepare(\n            `UPDATE events SET owner_yw_id = ? WHERE id IN (${placeholders})`\n          )\n            .bind(projectId, ...legacyIds)\n            .run();\n\n          events.forEach((event) => {\n            if (!event.ownerYwId) {\n              event.ownerYwId = projectId;\n            }\n          });\n        }\n\n        return jsonResponse(200, { events });\n      }\n\n      if (path === '/api/events' && request.method === 'DELETE') {\n        if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {\n          return forbidden('Only admin or manager can clear events');\n        }\n\n        await env.DB.prepare('DELETE FROM events WHERE owner_yw_id = ?')\n          .bind(projectId)\n          .run();\n\n        return jsonResponse(200, { success: true });\n      }\n\n      if (path === '/api/events' && request.method === 'POST') {\n        const body = await request.json().catch(() => null);\n        if (!body) {\n          return badRequest('Invalid payload');\n        }\n\n        const eventId = typeof body.id === 'string' ? body.id : crypto.randomUUID();\n        const createdAt = typeof body.createdAt === 'string' ? body.createdAt : new Date().toISOString();\n        const updatedAt = typeof body.updatedAt === 'string' ? body.updatedAt : createdAt;\n\n        const displayName = normalizeDisplayName(currentUser.firstName, currentUser.lastName);\n        const pricingData = body.pricing ? JSON.stringify(body.pricing) : null;\n\n        await env.DB.prepare(\n          `INSERT INTO events (\n            id, title, venue, venue_id, color, date, start_time, end_time,\n            status, payment_status, payment_method, contact_name, contact_phone,\n            contact_email, pricing_data, notes, created_at, updated_at, user_id,\n            owner_yw_id,\n            created_by_user_id, created_by_display_name, created_by_role,\n            updated_by_user_id, updated_by_display_name, updated_by_role\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`\n        )\n          .bind(\n            eventId,\n            body.title,\n            body.venue,\n            body.venueId ?? body.venue,\n            body.color ?? null,\n            body.date,\n            body.startTime,\n            body.endTime,\n            body.status,\n            body.paymentStatus,\n            body.paymentMethod ?? null,\n            body.contact?.name,\n            body.contact?.phone,\n            body.contact?.email,\n            pricingData,\n            body.notes ?? null,\n            createdAt,\n            updatedAt,\n            currentUser.id,\n            projectId,\n            currentUser.id,\n            displayName || currentUser.username,\n            currentUser.role,\n            currentUser.id,\n            displayName || currentUser.username,\n            currentUser.role\n          )\n          .run();\n\n        const savedEvent = await fetchEventById(env, projectId, eventId);\n        return jsonResponse(201, { event: savedEvent });\n      }\n\n      if (path === '/api/events/bulk' && request.method === 'POST') {\n        const body = await request.json().catch(() => null);\n        if (!body || !Array.isArray(body.events)) {\n          return badRequest('Invalid payload');\n        }\n\n        const displayName = normalizeDisplayName(currentUser.firstName, currentUser.lastName);\n        const nowIso = new Date().toISOString();\n\n        const inserts = body.events.map((incoming: any) => {\n          const eventId = typeof incoming.id === 'string' ? incoming.id : crypto.randomUUID();\n          const createdAt = typeof incoming.createdAt === 'string' ? incoming.createdAt : nowIso;\n          const updatedAt = typeof incoming.updatedAt === 'string' ? incoming.updatedAt : createdAt;\n          const pricingData = incoming.pricing ? JSON.stringify(incoming.pricing) : null;\n\n          return env.DB.prepare(\n            `INSERT INTO events (\n              id, title, venue, venue_id, color, date, start_time, end_time,\n              status, payment_status, payment_method, contact_name, contact_phone,\n              contact_email, pricing_data, notes, created_at, updated_at,\n              owner_yw_id,\n              created_by_user_id, created_by_display_name, created_by_role,\n              updated_by_user_id, updated_by_display_name, updated_by_role\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`\n          ).bind(\n            eventId,\n            incoming.title,\n            incoming.venue,\n            incoming.venueId ?? incoming.venue,\n            incoming.color ?? null,\n            incoming.date,\n            incoming.startTime,\n            incoming.endTime,\n            incoming.status,\n            incoming.paymentStatus,\n            incoming.paymentMethod ?? null,\n            incoming.contact?.name,\n            incoming.contact?.phone,\n            incoming.contact?.email,\n            pricingData,\n            incoming.notes ?? null,\n            createdAt,\n            updatedAt,\n            projectId,\n            currentUser.id,\n            displayName || currentUser.username,\n            currentUser.role,\n            currentUser.id,\n            displayName || currentUser.username,\n            currentUser.role\n          );\n        });\n\n        await env.DB.batch(inserts);\n\n        const { results } = await env.DB.prepare(\n          `SELECT * FROM events WHERE owner_yw_id = ? ORDER BY date ASC, start_time ASC`\n        )\n          .bind(projectId)\n          .all();\n\n        const events = results.map(mapEventRow);\n        return jsonResponse(201, { events });\n      }\n\n      if (path.startsWith('/api/events/') && request.method === 'PUT') {\n        const eventId = path.split('/')[3];\n        if (!eventId) {\n          return badRequest('Event ID is required');\n        }\n\n        const existing = await fetchEventById(env, projectId, eventId);\n        if (!existing) {\n          return notFound('Event not found');\n        }\n\n        const body = await request.json().catch(() => null);\n        if (!body) {\n          return badRequest('Invalid payload');\n        }\n\n        const pricingData = body.pricing ? JSON.stringify(body.pricing) : null;\n        const displayName = normalizeDisplayName(currentUser.firstName, currentUser.lastName);\n\n        await env.DB.prepare(\n          `UPDATE events SET\n            title = ?,\n            venue = ?,\n            venue_id = ?,\n            color = ?,\n            date = ?,\n            start_time = ?,\n            end_time = ?,\n            status = ?,\n            payment_status = ?,\n            payment_method = ?,\n            contact_name = ?,\n            contact_phone = ?,\n            contact_email = ?,\n            pricing_data = ?,\n            notes = ?,\n            updated_at = ?,\n            updated_by_user_id = ?,\n            updated_by_display_name = ?,\n            updated_by_role = ?\n          WHERE id = ? AND owner_yw_id = ?`\n        )\n          .bind(\n            body.title ?? existing.title,\n            body.venue ?? existing.venue,\n            body.venueId ?? existing.venueId,\n            body.color ?? existing.color,\n            body.date ?? existing.date,\n            body.startTime ?? existing.startTime,\n            body.endTime ?? existing.endTime,\n            body.status ?? existing.status,\n            body.paymentStatus ?? existing.paymentStatus,\n            body.paymentMethod ?? existing.paymentMethod,\n            body.contact?.name ?? existing.contact.name,\n            body.contact?.phone ?? existing.contact.phone,\n            body.contact?.email ?? existing.contact.email,\n            pricingData,\n            body.notes ?? existing.notes,\n            new Date().toISOString(),\n            currentUser.id,\n            displayName || currentUser.username,\n            currentUser.role,\n            eventId,\n            userYwId\n          )\n          .run();\n\n        const updatedEvent = await fetchEventById(env, projectId, eventId);\n        return jsonResponse(200, { event: updatedEvent });\n      }\n\n      if (path.startsWith('/api/events/') && request.method === 'DELETE') {\n        const eventId = path.split('/')[3];\n        if (!eventId) {\n          return badRequest('Event ID is required');\n        }\n\n        if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {\n          return forbidden('Only admin or manager can delete events');\n        }\n\n        const existing = await fetchEventById(env, projectId, eventId);\n        if (!existing) {\n          return notFound('Event not found');\n        }\n\n        await env.DB.prepare('DELETE FROM events WHERE id = ? AND owner_yw_id = ?')\n          .bind(eventId, projectId)\n          .run();\n\n        return jsonResponse(200, { success: true });\n      }\n\n      if (path === '/api/licenses' && request.method === 'GET') {\n        if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {\n          return forbidden('Only admin or manager can list licenses');\n        }\n\n        const { results } = await env.DB.prepare(\n          `SELECT * FROM licenses WHERE owner_yw_id = ? ORDER BY created_at DESC`\n        )\n          .bind(userYwId)\n          .all();\n\n        const licenses = results.map(mapLicenseRow);\n        return jsonResponse(200, { licenses });\n      }\n\n      if (path === '/api/licenses/generate' && request.method === 'POST') {\n        if (currentUser.role !== 'admin') {\n          return forbidden('Only admins can generate licenses');\n        }\n\n        const body = await request.json().catch(() => null);\n        if (!body || typeof body.planType !== 'string') {\n          return badRequest('planType is required');\n        }\n\n        const normalizedPlan = body.planType.toLowerCase();\n        if (!isLicensePlanType(normalizedPlan)) {\n          return badRequest('Invalid plan type');\n        }\n\n        const issuedAt = new Date();\n        const startDate = typeof body.startDate === 'string' ? body.startDate : formatIsoDate(issuedAt);\n        const start = parseIsoDateStrict(startDate);\n        if (!start) {\n          return badRequest('startDate must be in YYYY-MM-DD format');\n        }\n\n        const expiryDateInput = typeof body.expiryDate === 'string' ? body.expiryDate : null;\n        let expiryDate: string;\n        if (expiryDateInput) {\n          const parsedExpiry = parseIsoDateStrict(expiryDateInput);\n          if (!parsedExpiry) {\n            return badRequest('expiryDate must be in YYYY-MM-DD format');\n          }\n          expiryDate = formatIsoDate(parsedExpiry);\n        } else {\n          const monthsToAdd = normalizedPlan === 'yearly' ? 12 : 1;\n          expiryDate = formatIsoDate(addMonthsUtc(start, monthsToAdd));\n        }\n\n        const serialNumber = await generateUniqueLicenseSerial(env, {\n          ownerYwId,\n          planType: normalizedPlan,\n          issuedAt,\n          prefix: typeof body.prefix === 'string' ? body.prefix : undefined,\n          userName: typeof body.userName === 'string' ? body.userName : undefined,\n          randomLength: typeof body.randomLength === 'number' ? body.randomLength : undefined,\n        });\n\n        const license = await insertLicenseRecord(env, ownerYwId, {\n          serialNumber,\n          userName: typeof body.userName === 'string' ? body.userName : 'Unassigned',\n          planType: normalizedPlan,\n          startDate: formatIsoDate(start),\n          expiryDate,\n          status: 'active',\n          notes: typeof body.notes === 'string' ? body.notes : null,\n        });\n\n        return jsonResponse(201, { license });\n      }\n\n      if (path === '/api/licenses/generate' && request.method === 'GET') {\n        if (currentUser.role !== 'admin') {\n          return forbidden('Only admins can generate licenses');\n        }\n\n        const planType = url.searchParams.get('planType') ?? 'monthly';\n        if (!isLicensePlanType(planType)) {\n          return badRequest('Invalid plan type');\n        }\n\n        const issuedAt = new Date();\n        const serialNumber = await generateUniqueLicenseSerial(env, {\n          ownerYwId,\n          planType,\n          issuedAt,\n          prefix: url.searchParams.get('prefix') ?? undefined,\n          userName: url.searchParams.get('userName') ?? undefined,\n          randomLength: url.searchParams.get('randomLength')\n            ? Number.parseInt(url.searchParams.get('randomLength') || '', 10)\n            : undefined,\n        });\n\n        const startDate = formatIsoDate(issuedAt);\n        const expiryDate = formatIsoDate(addMonthsUtc(issuedAt, planType === 'yearly' ? 12 : 1));\n\n        return jsonResponse(200, {\n          serialNumber,\n          planType,\n          startDate,\n          expiryDate,\n          preview: true,\n        });\n      }\n\n      if (path === '/api/licenses' && request.method === 'POST') {\n        if (currentUser.role !== 'admin') {\n          return forbidden('Only admins can create licenses');\n        }\n\n        const body = await request.json().catch(() => null);\n        if (!body) {\n          return badRequest('Invalid payload');\n        }\n\n        const {\n          serialNumber,\n          userName,\n          planType,\n          startDate,\n          expiryDate,\n          status = 'active',\n          notes = null,\n          autoGenerate,\n        } = body;\n\n        if (autoGenerate) {\n          if (typeof planType !== 'string') {\n            return badRequest('planType is required when autoGenerate=true');\n          }\n\n          const normalizedPlan = planType.toLowerCase();\n          if (!isLicensePlanType(normalizedPlan)) {\n            return badRequest('Invalid plan type');\n          }\n\n          const issuedAt = new Date();\n          const generatedSerial = await generateUniqueLicenseSerial(env, {\n            userYwId,\n            planType: normalizedPlan,\n            issuedAt,\n            prefix: typeof body.prefix === 'string' ? body.prefix : undefined,\n            userName: typeof userName === 'string' ? userName : undefined,\n            randomLength: typeof body.randomLength === 'number' ? body.randomLength : undefined,\n          });\n\n          const effectiveStart = typeof startDate === 'string' ? startDate : formatIsoDate(issuedAt);\n          const start = parseIsoDateStrict(effectiveStart);\n          if (!start) {\n            return badRequest('startDate must be in YYYY-MM-DD format');\n          }\n\n          const effectiveExpiry = typeof expiryDate === 'string'\n            ? expiryDate\n            : formatIsoDate(addMonthsUtc(start, normalizedPlan === 'yearly' ? 12 : 1));\n\n          try {\n            const license = await insertLicenseRecord(env, ownerYwId, {\n              serialNumber: generatedSerial,\n              userName: typeof userName === 'string' ? userName : 'Unassigned',\n              planType: normalizedPlan,\n              startDate: formatIsoDate(start),\n              expiryDate: effectiveExpiry,\n              status: isLicenseStatus(typeof status === 'string' ? status.toLowerCase() : '')\n                ? (status as LicenseStatus)\n                : 'active',\n              notes: typeof notes === 'string' ? notes : null,\n            });\n\n            return jsonResponse(201, { license, generated: true });\n          } catch (error) {\n            if (error instanceof LicenseInsertError) {\n              return badRequest(error.message);\n            }\n            throw error;\n          }\n        }\n\n        if (\n          typeof serialNumber !== 'string' ||\n          typeof userName !== 'string' ||\n          typeof planType !== 'string' ||\n          typeof startDate !== 'string' ||\n          typeof expiryDate !== 'string'\n        ) {\n          return badRequest('Missing required license fields');\n        }\n\n        const normalizedPlan = planType.toLowerCase();\n        if (!isLicensePlanType(normalizedPlan)) {\n          return badRequest('Invalid plan type');\n        }\n\n        const normalizedStatus = (typeof status === 'string' ? status.toLowerCase() : 'active');\n        if (!isLicenseStatus(normalizedStatus)) {\n          return badRequest('Invalid license status');\n        }\n\n        try {\n          const license = await insertLicenseRecord(env, ownerYwId, {\n            serialNumber,\n            userName,\n            planType: normalizedPlan,\n            startDate,\n            expiryDate,\n            status: normalizedStatus,\n            notes: typeof notes === 'string' ? notes : null,\n          });\n          return jsonResponse(201, { license });\n        } catch (error) {\n          if (error instanceof LicenseInsertError) {\n            return badRequest(error.message);\n          }\n          throw error;\n        }\n      }\n\n      if (path === '/api/licenses/preview-serial' && request.method === 'GET') {\n        if (currentUser.role !== 'admin') {\n          return forbidden('Only admins can preview serials');\n        }\n\n        const planType = (url.searchParams.get('planType') ?? 'monthly').toLowerCase();\n        if (!isLicensePlanType(planType)) {\n          return badRequest('Invalid plan type');\n        }\n\n        const issuedAtParam = url.searchParams.get('issuedAt');\n        const issuedAt = issuedAtParam ? new Date(issuedAtParam) : new Date();\n        if (Number.isNaN(issuedAt.getTime())) {\n          return badRequest('issuedAt must be a valid date');\n        }\n\n        const serialNumber = await generateUniqueLicenseSerial(env, {\n          ownerYwId,\n          planType,\n          issuedAt,\n          prefix: url.searchParams.get('prefix') ?? undefined,\n          userName: url.searchParams.get('userName') ?? undefined,\n          randomLength: url.searchParams.get('randomLength')\n            ? Number.parseInt(url.searchParams.get('randomLength') || '', 10)\n            : undefined,\n        });\n\n        const startDate = url.searchParams.get('startDate') || formatIsoDate(issuedAt);\n\n        let expiryDate: string;\n        const expiryParam = url.searchParams.get('expiryDate');\n        if (expiryParam) {\n          const parsedExpiry = parseIsoDateStrict(expiryParam);\n          if (!parsedExpiry) {\n            return badRequest('expiryDate must be in YYYY-MM-DD format');\n          }\n          expiryDate = formatIsoDate(parsedExpiry);\n        } else {\n          const parsedStart = parseIsoDateStrict(startDate);\n          if (!parsedStart) {\n            return badRequest('startDate must be in YYYY-MM-DD format');\n          }\n          expiryDate = formatIsoDate(addMonthsUtc(parsedStart, planType === 'yearly' ? 12 : 1));\n        }\n\n        return jsonResponse(200, {\n          serialNumber,\n          planType,\n          startDate,\n          expiryDate,\n          preview: true,\n        });\n      }\n\n      if (path.startsWith('/api/licenses/') && request.method === 'PUT') {\n        if (currentUser.role !== 'admin') {\n          return forbidden('Only admins can modify licenses');\n        }\n\n        const licenseId = path.split('/')[3];\n        if (!licenseId) {\n          return badRequest('License ID is required');\n        }\n\n        const existingRow = await env.DB.prepare(\n          `SELECT * FROM licenses WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n        )\n          .bind(licenseId, projectId)\n          .first<any>();\n\n        if (!existingRow) {\n          return notFound('License not found');\n        }\n\n        const body = await request.json().catch(() => null);\n        if (!body) {\n          return badRequest('Invalid payload');\n        }\n\n        const {\n          serialNumber = existingRow.serial_number,\n          userName = existingRow.user_name,\n          planType = existingRow.plan_type,\n          startDate = existingRow.start_date,\n          expiryDate = existingRow.expiry_date,\n          status = existingRow.status,\n          notes = existingRow.notes,\n        } = body;\n\n        const normalizedPlan = (planType as string | undefined)?.toLowerCase() as LicensePlanType | undefined;\n        if (normalizedPlan && !['monthly', 'yearly'].includes(normalizedPlan)) {\n          return badRequest('Invalid plan type');\n        }\n\n        const normalizedStatus = (status as string | undefined)?.toLowerCase() as LicenseStatus | undefined;\n        if (normalizedStatus && !['active', 'expired', 'disabled'].includes(normalizedStatus)) {\n          return badRequest('Invalid license status');\n        }\n\n        if (serialNumber !== existingRow.serial_number) {\n          const duplicate = await env.DB.prepare(\n            `SELECT id FROM licenses WHERE owner_yw_id = ? AND serial_number = ? AND id != ? LIMIT 1`\n          )\n            .bind(ownerYwId, serialNumber, licenseId)\n            .first<{ id: string }>();\n\n          if (duplicate) {\n            return badRequest('Serial number already exists');\n          }\n        }\n\n        const updateIso = new Date().toISOString();\n        await env.DB.prepare(\n          `UPDATE licenses SET\n            serial_number = ?,\n            user_name = ?,\n            plan_type = ?,\n            start_date = ?,\n            expiry_date = ?,\n            status = ?,\n            notes = ?,\n            updated_at = ?\n          WHERE id = ? AND owner_yw_id = ?`\n        )\n          .bind(\n            serialNumber,\n            userName,\n            normalizedPlan ?? existingRow.plan_type,\n            startDate,\n            expiryDate,\n            normalizedStatus ?? existingRow.status,\n            notes,\n            updateIso,\n            licenseId,\n            userYwId\n          )\n          .run();\n\n        const updated = await env.DB.prepare(\n          `SELECT * FROM licenses WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n        )\n          .bind(licenseId, projectId)\n          .first<any>();\n\n        return jsonResponse(200, { license: mapLicenseRow(updated) });\n      }\n\n      if (path.startsWith('/api/licenses/') && request.method === 'DELETE') {\n        if (currentUser.role !== 'admin') {\n          return forbidden('Only admins can delete licenses');\n        }\n\n        const licenseId = path.split('/')[3];\n        if (!licenseId) {\n          return badRequest('License ID is required');\n        }\n\n        const existingRow = await env.DB.prepare(\n          `SELECT id FROM licenses WHERE id = ? AND owner_yw_id = ? LIMIT 1`\n        )\n          .bind(licenseId, projectId)\n          .first<any>();\n\n        if (!existingRow) {\n          return notFound('License not found');\n        }\n\n        await env.DB.prepare('DELETE FROM licenses WHERE id = ? AND owner_yw_id = ?')\n          .bind(licenseId, projectId)\n          .run();\n\n        return jsonResponse(200, { success: true });\n      }\n\n      if (path === '/api/licenses/check' && request.method === 'POST') {\n        const body = await request.json().catch(() => null);\n        if (!body || typeof body.serial !== 'string') {\n          return badRequest('Serial is required');\n        }\n\n        const serial = body.serial.trim();\n        const licenseRow = await env.DB.prepare(\n          `SELECT * FROM licenses WHERE owner_yw_id = ? AND serial_number = ? LIMIT 1`\n        )\n          .bind(ownerYwId, serial)\n          .first<any>();\n\n        if (!licenseRow) {\n          return jsonResponse(404, {\n            valid: false,\n            reason: 'Invalid serial',\n          });\n        }\n\n        if (licenseRow.status !== 'active') {\n          return jsonResponse(403, {\n            valid: false,\n            reason: 'License inactive',\n            status: licenseRow.status,\n          });\n        }\n\n        const now = new Date();\n        const expiry = new Date(licenseRow.expiry_date);\n        if (Number.isNaN(expiry.getTime())) {\n          return jsonResponse(500, {\n            valid: false,\n            reason: 'Invalid expiry date',\n          });\n        }\n\n        if (now > expiry) {\n          await env.DB.prepare(\n            `UPDATE licenses SET status = 'expired', updated_at = ? WHERE id = ? AND owner_yw_id = ?`\n          )\n            .bind(new Date().toISOString(), licenseRow.id, ownerYwId)\n            .run();\n\n          return jsonResponse(403, {\n            valid: false,\n            reason: 'License expired',\n            expiry: licenseRow.expiry_date,\n          });\n        }\n\n        return jsonResponse(200, {\n          valid: true,\n          user: licenseRow.user_name,\n          expiry: licenseRow.expiry_date,\n          plan: licenseRow.plan_type,\n          status: licenseRow.status,\n        });\n      }\n\n      if (path === '/api/events/export' && request.method === 'GET') {\n        const { results } = await env.DB.prepare(\n          `SELECT * FROM events WHERE owner_yw_id = ? ORDER BY date ASC`\n        )\n          .bind(projectId)\n          .all();\n\n        const csvHeader = 'Title,Venue,Date,Start Time,End Time,Status,Payment Status,Contact Name,Contact Phone,Contact Email,Notes,Created By\\n';\n        const csvRows = results\n          .map((row: any) => {\n            const fields = [\n              row.title,\n              row.venue,\n              row.date,\n              row.start_time,\n              row.end_time,\n              row.status,\n              row.payment_status,\n              row.contact_name,\n              row.contact_phone,\n              row.contact_email,\n              row.notes ?? '',\n              row.created_by_display_name ?? '',\n            ];\n            return fields.map((field) => `\"${String(field ?? '').replace(/\"/g, '\"\"')}\"`).join(',');\n          })\n          .join('\\n');\n\n        const csvContent = csvHeader + csvRows;\n        return corsResponse(\n          new Response(csvContent, {\n            headers: {\n              'Content-Type': 'text/csv',\n              'Content-Disposition': 'attachment; filename=\"events.csv\"',\n            },\n          })\n        );\n      }\n\n      return notFound('Endpoint not found');\n    } catch (error) {\n      return internalError(error);\n    }\n  },\n};\n"],
  "mappings": "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",
  "names": ["PerformanceMark", "clear", "count", "countReset", "createTask", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeLog", "timeStamp", "trace", "warn", "hrtime", "Socket", "Socket", "dir", "env", "count", "cwd", "hrtime", "assert", "error", "env", "projectId", "ownerYwId", "auth", "normalizedPlan"]
}
